// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: albums.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createAlbum = `-- name: CreateAlbum :one
insert into albums (id, created_at, updated_at, name, name_slug, genre, img_url, artist_id)
values (
	gen_random_uuid(),
	NOW(),
	NOW(),
	$1,
	$2,
	$3,
	$4,
	$5
)
returning id, created_at, updated_at, name, name_slug, genre, img_url, artist_id
`

type CreateAlbumParams struct {
	Name     string
	NameSlug string
	Genre    string
	ImgUrl   string
	ArtistID uuid.UUID
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (Album, error) {
	row := q.db.QueryRowContext(ctx, createAlbum,
		arg.Name,
		arg.NameSlug,
		arg.Genre,
		arg.ImgUrl,
		arg.ArtistID,
	)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.NameSlug,
		&i.Genre,
		&i.ImgUrl,
		&i.ArtistID,
	)
	return i, err
}

const getArtistAlbums = `-- name: GetArtistAlbums :many
select albums.name, albums.name_slug, albums.genre, albums.img_url, artists.name as artist_name, artists.name_slug artist_name_slug
from albums
join artists
on albums.artist_id = artists.id
where artists.name_slug = $1
`

type GetArtistAlbumsRow struct {
	Name           string
	NameSlug       string
	Genre          string
	ImgUrl         string
	ArtistName     string
	ArtistNameSlug string
}

func (q *Queries) GetArtistAlbums(ctx context.Context, nameSlug string) ([]GetArtistAlbumsRow, error) {
	rows, err := q.db.QueryContext(ctx, getArtistAlbums, nameSlug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetArtistAlbumsRow
	for rows.Next() {
		var i GetArtistAlbumsRow
		if err := rows.Scan(
			&i.Name,
			&i.NameSlug,
			&i.Genre,
			&i.ImgUrl,
			&i.ArtistName,
			&i.ArtistNameSlug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
