// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: albums.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createAlbum = `-- name: CreateAlbum :one
insert into albums (id, created_at, updated_at, name, genre, img_url, artist_id)
values (
	gen_random_uuid(),
	NOW(),
	NOW(),
	$1,
	$2,
	$3,
	$4
)
returning id, created_at, updated_at, name, genre, img_url, artist_id
`

type CreateAlbumParams struct {
	Name     string
	Genre    string
	ImgUrl   string
	ArtistID uuid.UUID
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (Album, error) {
	row := q.db.QueryRowContext(ctx, createAlbum,
		arg.Name,
		arg.Genre,
		arg.ImgUrl,
		arg.ArtistID,
	)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Genre,
		&i.ImgUrl,
		&i.ArtistID,
	)
	return i, err
}

const getAlbum = `-- name: GetAlbum :one
select id, created_at, updated_at, name, genre, img_url, artist_id from albums where id = $1
`

func (q *Queries) GetAlbum(ctx context.Context, id uuid.UUID) (Album, error) {
	row := q.db.QueryRowContext(ctx, getAlbum, id)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Genre,
		&i.ImgUrl,
		&i.ArtistID,
	)
	return i, err
}

const getAlbumTracks = `-- name: GetAlbumTracks :many
select tracks.id, tracks.name, tracks.duration, tracks.album_track_number, albums.name as album_name, albums.img_url as img_url
from tracks
join albums
on tracks.album_id = albums.id
where albums.id = $1
`

type GetAlbumTracksRow struct {
	ID               uuid.UUID
	Name             string
	Duration         int32
	AlbumTrackNumber int32
	AlbumName        string
	ImgUrl           string
}

func (q *Queries) GetAlbumTracks(ctx context.Context, id uuid.UUID) ([]GetAlbumTracksRow, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumTracks, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlbumTracksRow
	for rows.Next() {
		var i GetAlbumTracksRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Duration,
			&i.AlbumTrackNumber,
			&i.AlbumName,
			&i.ImgUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlbums = `-- name: GetAlbums :many
select id, created_at, updated_at, name, genre, img_url, artist_id from albums
`

func (q *Queries) GetAlbums(ctx context.Context) ([]Album, error) {
	rows, err := q.db.QueryContext(ctx, getAlbums)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Album
	for rows.Next() {
		var i Album
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Genre,
			&i.ImgUrl,
			&i.ArtistID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArtistAlbums = `-- name: GetArtistAlbums :many
select albums.id, albums.name, albums.genre, albums.img_url, artists.name as artist_name
from albums
join artists
on albums.artist_id = artists.id
where artists.id = $1
`

type GetArtistAlbumsRow struct {
	ID         uuid.UUID
	Name       string
	Genre      string
	ImgUrl     string
	ArtistName string
}

func (q *Queries) GetArtistAlbums(ctx context.Context, id uuid.UUID) ([]GetArtistAlbumsRow, error) {
	rows, err := q.db.QueryContext(ctx, getArtistAlbums, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetArtistAlbumsRow
	for rows.Next() {
		var i GetArtistAlbumsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Genre,
			&i.ImgUrl,
			&i.ArtistName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTop12Albums = `-- name: GetTop12Albums :many
select 
	albums.id, albums.name, albums.genre, albums.img_url, artists.name as artist_name
from albums
join artists
on albums.artist_id = artists.id
limit 12
`

type GetTop12AlbumsRow struct {
	ID         uuid.UUID
	Name       string
	Genre      string
	ImgUrl     string
	ArtistName string
}

func (q *Queries) GetTop12Albums(ctx context.Context) ([]GetTop12AlbumsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTop12Albums)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTop12AlbumsRow
	for rows.Next() {
		var i GetTop12AlbumsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Genre,
			&i.ImgUrl,
			&i.ArtistName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
