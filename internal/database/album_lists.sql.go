// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: album_lists.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addAlbumToList = `-- name: AddAlbumToList :one
insert into AlbumLists_Albums (id, album_lists_id,album_id)
values (
	gen_random_uuid(),
	$1,
	$2
)
returning id, album_lists_id, album_id
`

type AddAlbumToListParams struct {
	AlbumListsID uuid.UUID
	AlbumID      uuid.UUID
}

func (q *Queries) AddAlbumToList(ctx context.Context, arg AddAlbumToListParams) (AlbumlistsAlbum, error) {
	row := q.db.QueryRowContext(ctx, addAlbumToList, arg.AlbumListsID, arg.AlbumID)
	var i AlbumlistsAlbum
	err := row.Scan(&i.ID, &i.AlbumListsID, &i.AlbumID)
	return i, err
}

const createAlbumList = `-- name: CreateAlbumList :one
insert into album_lists (id, created_at, updated_at, user_id, title)
values (
	gen_random_uuid(),
	NOW(),
	NOW(),
	$1,
	$2
)
returning id, created_at, updated_at, user_id, title
`

type CreateAlbumListParams struct {
	UserID uuid.UUID
	Title  sql.NullString
}

func (q *Queries) CreateAlbumList(ctx context.Context, arg CreateAlbumListParams) (AlbumList, error) {
	row := q.db.QueryRowContext(ctx, createAlbumList, arg.UserID, arg.Title)
	var i AlbumList
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Title,
	)
	return i, err
}

const deleteAlbumFromList = `-- name: DeleteAlbumFromList :exec
DELETE FROM AlbumLists_Albums
WHERE album_lists_id = $1 AND album_id = $2
`

type DeleteAlbumFromListParams struct {
	AlbumListsID uuid.UUID
	AlbumID      uuid.UUID
}

func (q *Queries) DeleteAlbumFromList(ctx context.Context, arg DeleteAlbumFromListParams) error {
	_, err := q.db.ExecContext(ctx, deleteAlbumFromList, arg.AlbumListsID, arg.AlbumID)
	return err
}

const getAlbumsFromList = `-- name: GetAlbumsFromList :many
SELECT a.id, a.name, a.img_url
FROM albums as a
JOIN AlbumLists_Albums as ala ON a.id = ala.album_id
WHERE ala.album_lists_id = $1
`

type GetAlbumsFromListRow struct {
	ID     uuid.UUID
	Name   string
	ImgUrl string
}

func (q *Queries) GetAlbumsFromList(ctx context.Context, albumListsID uuid.UUID) ([]GetAlbumsFromListRow, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumsFromList, albumListsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlbumsFromListRow
	for rows.Next() {
		var i GetAlbumsFromListRow
		if err := rows.Scan(&i.ID, &i.Name, &i.ImgUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlbumsNotInList = `-- name: GetAlbumsNotInList :many
SELECT a.id, a.name, a.img_url
FROM albums as a
WHERE id NOT IN (
	SELECT album_id 
	FROM AlbumLists_Albums
	WHERE album_lists_id = $1
)
`

type GetAlbumsNotInListRow struct {
	ID     uuid.UUID
	Name   string
	ImgUrl string
}

func (q *Queries) GetAlbumsNotInList(ctx context.Context, albumListsID uuid.UUID) ([]GetAlbumsNotInListRow, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumsNotInList, albumListsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlbumsNotInListRow
	for rows.Next() {
		var i GetAlbumsNotInListRow
		if err := rows.Scan(&i.ID, &i.Name, &i.ImgUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListName = `-- name: GetListName :many
SELECT list.title
FROM album_lists as list
WHERE list.id = $1
`

func (q *Queries) GetListName(ctx context.Context, id uuid.UUID) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getListName, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var title sql.NullString
		if err := rows.Scan(&title); err != nil {
			return nil, err
		}
		items = append(items, title)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLists = `-- name: GetUserLists :many
SELECT list.id, list.title
FROM album_lists as list
WHERE list.user_id = $1
`

type GetUserListsRow struct {
	ID    uuid.UUID
	Title sql.NullString
}

func (q *Queries) GetUserLists(ctx context.Context, userID uuid.UUID) ([]GetUserListsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserLists, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserListsRow
	for rows.Next() {
		var i GetUserListsRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
