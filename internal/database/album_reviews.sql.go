// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: album_reviews.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createReviewLong = `-- name: CreateReviewLong :one
insert into album_reviews (id, created_at, updated_at, user_id, album_id, title, review, score)
values (
	gen_random_uuid(),
	NOW(),
	NOW(),
	$1,
	$2,
	$3,
	$4,
	$5
)
returning id, created_at, updated_at, user_id, album_id, title, review, score
`

type CreateReviewLongParams struct {
	UserID  uuid.UUID
	AlbumID uuid.UUID
	Title   sql.NullString
	Review  sql.NullString
	Score   string
}

func (q *Queries) CreateReviewLong(ctx context.Context, arg CreateReviewLongParams) (AlbumReview, error) {
	row := q.db.QueryRowContext(ctx, createReviewLong,
		arg.UserID,
		arg.AlbumID,
		arg.Title,
		arg.Review,
		arg.Score,
	)
	var i AlbumReview
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.AlbumID,
		&i.Title,
		&i.Review,
		&i.Score,
	)
	return i, err
}

const createReviewShort = `-- name: CreateReviewShort :one
insert into album_reviews (id, created_at, updated_at, user_id, album_id, title, review, score)
values (
	gen_random_uuid(),
	NOW(),
	NOW(),
	$1,
	$2,
	NULL,
	NULL,
	$3
)
returning id, created_at, updated_at, user_id, album_id, title, review, score
`

type CreateReviewShortParams struct {
	UserID  uuid.UUID
	AlbumID uuid.UUID
	Score   string
}

func (q *Queries) CreateReviewShort(ctx context.Context, arg CreateReviewShortParams) (AlbumReview, error) {
	row := q.db.QueryRowContext(ctx, createReviewShort, arg.UserID, arg.AlbumID, arg.Score)
	var i AlbumReview
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.AlbumID,
		&i.Title,
		&i.Review,
		&i.Score,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
delete from album_reviews
where album_reviews.id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteReview, id)
	return err
}

const getReview = `-- name: GetReview :one
select album_reviews.id, album_reviews.created_at, album_reviews.updated_at, album_reviews.user_id, album_reviews.album_id, album_reviews.title, album_reviews.review, album_reviews.score, albums.id as album_id, albums.name as album_name, albums.img_url as album_img, users.name as username
from album_reviews
join albums on albums.id = album_reviews.album_id
join users on users.id = album_reviews.user_id
where album_reviews.id = $1
`

type GetReviewRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	AlbumID   uuid.UUID
	Title     sql.NullString
	Review    sql.NullString
	Score     string
	AlbumID_2 uuid.UUID
	AlbumName string
	AlbumImg  string
	Username  string
}

func (q *Queries) GetReview(ctx context.Context, id uuid.UUID) (GetReviewRow, error) {
	row := q.db.QueryRowContext(ctx, getReview, id)
	var i GetReviewRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.AlbumID,
		&i.Title,
		&i.Review,
		&i.Score,
		&i.AlbumID_2,
		&i.AlbumName,
		&i.AlbumImg,
		&i.Username,
	)
	return i, err
}

const getReviewByAlbum = `-- name: GetReviewByAlbum :many
select id, created_at, updated_at, user_id, album_id, title, review, score from album_reviews
where album_id = $1
`

func (q *Queries) GetReviewByAlbum(ctx context.Context, albumID uuid.UUID) ([]AlbumReview, error) {
	rows, err := q.db.QueryContext(ctx, getReviewByAlbum, albumID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AlbumReview
	for rows.Next() {
		var i AlbumReview
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.AlbumID,
			&i.Title,
			&i.Review,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewByUser = `-- name: GetReviewByUser :many
select album_reviews.id, album_reviews.created_at, album_reviews.updated_at, album_reviews.user_id, album_reviews.album_id, album_reviews.title, album_reviews.review, album_reviews.score, albums.id, albums.name, albums.img_url
from album_reviews
join albums on albums.id = album_reviews.album_id
where user_id = $1
`

type GetReviewByUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	AlbumID   uuid.UUID
	Title     sql.NullString
	Review    sql.NullString
	Score     string
	ID_2      uuid.UUID
	Name      string
	ImgUrl    string
}

func (q *Queries) GetReviewByUser(ctx context.Context, userID uuid.UUID) ([]GetReviewByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getReviewByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReviewByUserRow
	for rows.Next() {
		var i GetReviewByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.AlbumID,
			&i.Title,
			&i.Review,
			&i.Score,
			&i.ID_2,
			&i.Name,
			&i.ImgUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
