// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tracks.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAlbumTracks = `-- name: CreateAlbumTracks :one
insert into tracks (id, created_at, updated_at, name, name_slug, duration, album_track_number, artist_id, album_id)
values (
	gen_random_uuid(),
	NOW(),
	NOW(),
	$1,
	$2,
	$3,
	$4,
	$5,
	$6
)
returning id, created_at, updated_at, name, name_slug, duration, album_track_number, artist_id, album_id
`

type CreateAlbumTracksParams struct {
	Name             string
	NameSlug         string
	Duration         int32
	AlbumTrackNumber int32
	ArtistID         uuid.UUID
	AlbumID          uuid.UUID
}

func (q *Queries) CreateAlbumTracks(ctx context.Context, arg CreateAlbumTracksParams) (Track, error) {
	row := q.db.QueryRowContext(ctx, createAlbumTracks,
		arg.Name,
		arg.NameSlug,
		arg.Duration,
		arg.AlbumTrackNumber,
		arg.ArtistID,
		arg.AlbumID,
	)
	var i Track
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.NameSlug,
		&i.Duration,
		&i.AlbumTrackNumber,
		&i.ArtistID,
		&i.AlbumID,
	)
	return i, err
}

const getAlbumTracks = `-- name: GetAlbumTracks :many
select tracks.name, tracks.name_slug, tracks.duration, tracks.album_track_number, albums.name as album_name, albums.name_slug as album_name_slug, albums.img_url as img_url
from tracks
join albums
on tracks.album_id = albums.id
where albums.name_slug = $1
`

type GetAlbumTracksRow struct {
	Name             string
	NameSlug         string
	Duration         int32
	AlbumTrackNumber int32
	AlbumName        string
	AlbumNameSlug    string
	ImgUrl           string
}

func (q *Queries) GetAlbumTracks(ctx context.Context, nameSlug string) ([]GetAlbumTracksRow, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumTracks, nameSlug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlbumTracksRow
	for rows.Next() {
		var i GetAlbumTracksRow
		if err := rows.Scan(
			&i.Name,
			&i.NameSlug,
			&i.Duration,
			&i.AlbumTrackNumber,
			&i.AlbumName,
			&i.AlbumNameSlug,
			&i.ImgUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTop12Tracks = `-- name: GetTop12Tracks :many
select distinct on (albums.name)
	tracks.name, tracks.name_slug, tracks.duration,
	albums.name as album_name, albums.name_slug as album_name_slug, albums.img_url as img_url,
	artists.name as artist_name, artists.name_slug as artist_name_slug
from tracks
join albums on albums.id = tracks.album_id
join artists on artists.id = albums.artist_id
limit 12
`

type GetTop12TracksRow struct {
	Name           string
	NameSlug       string
	Duration       int32
	AlbumName      string
	AlbumNameSlug  string
	ImgUrl         string
	ArtistName     string
	ArtistNameSlug string
}

func (q *Queries) GetTop12Tracks(ctx context.Context) ([]GetTop12TracksRow, error) {
	rows, err := q.db.QueryContext(ctx, getTop12Tracks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTop12TracksRow
	for rows.Next() {
		var i GetTop12TracksRow
		if err := rows.Scan(
			&i.Name,
			&i.NameSlug,
			&i.Duration,
			&i.AlbumName,
			&i.AlbumNameSlug,
			&i.ImgUrl,
			&i.ArtistName,
			&i.ArtistNameSlug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrack = `-- name: GetTrack :one
select
	tracks.id, tracks.created_at, tracks.updated_at, tracks.name, tracks.name_slug, tracks.duration, tracks.album_track_number, tracks.artist_id, tracks.album_id,
	albums.name_slug as album_name,
	artists.name_slug as artist_name
from tracks
join albums on albums.id = tracks.album_id
join artists on artists.id = albums.artist_id
where tracks.name_slug = $1
`

type GetTrackRow struct {
	ID               uuid.UUID
	CreatedAt        time.Time
	UpdatedAt        time.Time
	Name             string
	NameSlug         string
	Duration         int32
	AlbumTrackNumber int32
	ArtistID         uuid.UUID
	AlbumID          uuid.UUID
	AlbumName        string
	ArtistName       string
}

func (q *Queries) GetTrack(ctx context.Context, nameSlug string) (GetTrackRow, error) {
	row := q.db.QueryRowContext(ctx, getTrack, nameSlug)
	var i GetTrackRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.NameSlug,
		&i.Duration,
		&i.AlbumTrackNumber,
		&i.ArtistID,
		&i.AlbumID,
		&i.AlbumName,
		&i.ArtistName,
	)
	return i, err
}
